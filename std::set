//函数签名
//empty(1)
//set();
//explicit set(const key_compare& comp,
//	const allocator_type& alloc = allocator_type());
//explicit set(const allocator_type& alloc);
//range(2)
//template <class InputIterator>
//set(InputIterator first, InputIterator last,
//	const key_compare& comp = key_compare(),
//	const allocator_type& = allocator_type());
//template <class InputIterator>
//set(InputIterator first, InputIterator last,
//	const allocator_type& = allocator_type());
//copy(3)
//set(const set& x);
//set(const set& x, const allocator_type& alloc);
//move(4)
//set(set&& x);
//set(set&& x, const allocator_type& alloc);
//initializer list(5)
//set(initializer_list<value_type> il,
//	const key_compare& comp = key_compare(),
//	const allocator_type& alloc = allocator_type());
//set(initializer_list<value_type> il,
//	const allocator_type& alloc = allocator_type());
//copy(1)
//set& operator= (const set& x);
//move(2)
//set& operator= (set&& x);
//initializer list(3)
//set& operator= (initializer_list<value_type> il);
#include<iostream>
#include<set>
using namespace std;
bool funCmp(const int lhs, const int rhs)
{
	return lhs < rhs;
}
struct myCmp {
	bool operator()(const int lhs, const int rhs)const 
	{
		return lhs < rhs;
	}
};
int main()
{
	set<int> first_set;
	int ints[] = { 1,2,3,4,5 };

	set<int> second_set(ints, ints + 5);

	set<int> third_set(second_set);

	set<int> fourth_set(third_set.begin(), third_set.end());

	set<int,myCmp> fifth_set;

	bool(*ptr)(const int, const int);
	set<int, bool(*)(const int, const int)> six_set(ptr);

	first_set = second_set;
	second_set = set<int>();
	cout << "Size of first_set :" << first_set.size() << endl;
	cout << "Size of second_set :" << second_set.size() << endl;
	return 0;
}
//输出：
//Size of first_set :5
//Size of first_set :0

//函数签名
//iterator begin() noexcept;
//const_iterator begin() const noexcept;
//iterator end() noexcept;
//const_iterator end() const noexcept;
//reverse_iterator rbegin() noexcept;
//const_reverse_iterator rbegin() const noexcept;
//reverse_iterator rend() noexcept;
//const_reverse_iterator rend() const noexcept;
//const_iterator cbegin() const noexcept;
//const_iterator cend() const noexcept;
//const_reverse_iterator crbegin() const noexcept;
//const_reverse_iterator crend() const noexcept;
#include<iostream>
#include<set>
using namespace std;
int main()
{
	set<int> first_set = { 2,5,4,1,3 };
	for (auto it = first_set.begin(); it != first_set.end(); it++)
		cout << *it << " ";
	cout << endl;
	for (auto it = first_set.rbegin(); it != first_set.rend(); it++)
		cout << *it << " ";
	cout << endl;
	for (auto it = first_set.cbegin(); it != first_set.cend(); it++)
		cout << *it << " ";
	cout << endl;
	for (auto it = first_set.crbegin(); it != first_set.crend(); it++)
		cout << *it << " ";
	cout << endl;
	return 0;
}
//输出：
//1 2 3 4 5
//5 4 3 2 1
//1 2 3 4 5
//5 4 3 2 1

//函数签名
//bool empty() const noexcept;
//size_type size() const noexcept;
//size_type max_size() const noexcept;
#include<iostream>
#include<set>
using namespace std;
int main()
{
	set<int> first_set = { 3,2,4,1,5 };
	if (first_set.empty())
		cout << "first_set is empty." << endl;
	else 
		cout << "first_set is not empty." << endl;

	cout << "first_set's size : " << first_set.size() << endl;
	cout << "first_set's maxsize : " << first_set.max_size() << endl;
	return 0;
}
//输出：
//first_set is not empty.
//first_set's size : 5
//first_set's maxsize : 214748364

//函数签名
//single element(1)
//pair<iterator, bool> insert(const value_type& val);
//pair<iterator, bool> insert(value_type&& val);
//with hint(2)
//iterator insert(const_iterator position, const value_type& val);
//iterator insert(const_iterator position, value_type&& val);
//range(3)
//template <class InputIterator>
//void insert(InputIterator first, InputIterator last);
//initializer list(4)
//void insert(initializer_list<value_type> il);
//(1)
//iterator  erase(const_iterator position);
//(2)
//size_type erase(const value_type& val);
//(3)
//iterator  erase(const_iterator first, const_iterator last);
//void swap(set& x);
//void clear() noexcept;
//template <class... Args>
//pair<iterator, bool> emplace(Args&&... args);
//template <class... Args>
//iterator emplace_hint(const_iterator position, Args&&... args);
#include<iostream>
#include<set>
#include<string>
using namespace std;
int main()
{
	set<int> first_set = { 10,20,30,40,50 };
	pair<set<int>::iterator, bool> ret;
	set<int>::iterator it;
	ret = first_set.insert(20);
	if (ret.second == false)
		it = ret.first;		//"it" now points to element 20
	first_set.insert(23);
	first_set.insert(25);
	first_set.insert(22);
	int ints[] = { 5,10,20 };
	first_set.insert(ints, ints + 3);
	for (auto x : first_set)
		cout << x << " ";
	cout << endl;
	it = first_set.begin();
	advance(it, 3);
	first_set.erase(it);
	cout << first_set.erase(23) << endl;
	cout << first_set.erase(24) << endl;

	it = first_set.find(25);
	first_set.erase(it, first_set.end());
	for (auto x : first_set)
		cout << x << " ";
	cout << endl;

	set<int> second_set;
	first_set.swap(second_set);
	second_set.clear();

	set<string> third_set;
	third_set.emplace("abc");
	third_set.emplace("xyz");
	auto r = third_set.emplace("abc");
	if (!r.second)
		cout << "abc already exists in third_set." << endl;

	auto strIt = third_set.begin();
	strIt = third_set.emplace_hint(strIt, "ok");
	strIt = third_set.emplace_hint(strIt, "no");
	third_set.emplace_hint(third_set.end(), "zzz");
	for (auto x : third_set)
		cout << x << " ";
	cout << endl;
	return 0;
}
//输出：
//5 10 20 22 23 25 30 40 50
//1
//0
//5 10 20
//abc already exists in third_set.
//abc no ok xyz zzz

//函数签名
//key_compare key_comp() const;
//value_compare value_comp() const;
#include<iostream>
#include<set>
using namespace std;
int main()
{
	set<int> first_set = { 1,2,3,4,5 };
	int highest;
	set<int>::key_compare key_cmp = first_set.key_comp();

	highest = *first_set.rbegin();
	auto it = first_set.begin();
	do {
		cout << *it << " ";
	} while (key_cmp(*(++it), highest));
	cout << endl;

	set<int>::value_compare value_cmp = first_set.value_comp();
	it = first_set.begin();
	do {
		cout << *it << " ";
	} while (value_cmp(*(++it), highest));
	cout << endl;
	return 0;
}
//输出：
//1 2 3 4
//1 2 3 4
